---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { createSignal, For, Index } from 'solid-js';
import type { Todo } from '../types/todo';
import TodoItem from '../components/TodoItem';

const [todos, setTodos] = createSignal<Todo[]>([
	{
		text: 'Create a new todo',
		done: false
	},
	{
		text: 'Hello Solid and Astro',
		done: true
	}
]);
---

<Layout title="Solid Astro TODO">
	<main>
		<h1>Welcome to <span class="text-gradient">Astro</span></h1>
		<p class="instructions">
			<strong> Your TODO list here</strong>
		</p>
		<section>
			<Card title="Unfinished Jobs">
				<ul class="todo-list">
					{
						todos().map((todo, index) => {
							if (!todo.done) {
								return (
									<TodoItem
										text={todo.text}
										done={todo.done}
										onChange={(event: Event) => {
											setTodos(
												todos().map((todo, i) => {
													if (i === index) {
														return {
															...todo,
															done: (event.target as HTMLInputElement).checked
														};
													}
													return todo;
												})
											);
										}}
									/>
								);
							}
						})
					}
				</ul>
			</Card>

			<Card title="Add TODO">
				<div class="todo-list-add">
					<input type="text" />
					<button> Add</button>
				</div>
			</Card>

			<Card title="Finished Jobs">
				<ul class="todo-list">
					{
						todos().map((todo, index) => {
							if (todo.done) {
								return (
									<TodoItem
										text={todo.text}
										done={todo.done}
										onChange={(event: Event) => {
											setTodos(
												todos().map((todo, i) => {
													if (i === index) {
														return {
															...todo,
															done: (event.target as HTMLInputElement).checked
														};
													}
													return todo;
												})
											);
										}}
									/>
								);
							}
						})
					}
				</ul>
			</Card>
		</section>
	</main>

	<style>
		main {
			margin: auto;
			padding: 1.5rem;
			max-width: 60ch;
		}

		section {
			display: flex;
			flex-direction: column;
			gap: 1rem;
		}
		h1 {
			font-size: 3rem;
			font-weight: 800;
			margin: 0;
		}
		.text-gradient {
			background-image: var(--accent-gradient);
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			background-size: 400%;
			background-position: 0%;
		}
		.instructions {
			line-height: 1.6;
			margin: 1rem 0;
			border: 1px solid rgba(var(--accent), 25%);
			background-color: white;
			padding: 1rem;
			border-radius: 0.4rem;
		}
		.instructions code {
			font-size: 0.875em;
			font-weight: bold;
			background: rgba(var(--accent), 12%);
			color: rgb(var(--accent));
			border-radius: 4px;
			padding: 0.3em 0.45em;
		}
		.instructions strong {
			color: rgb(var(--accent));
			font-weight: bold;
			font-size: larger;
		}

		.todo-list {
			padding-left: 1rem;
		}

		.todo-list-add {
			display: flex;
			justify-content: end;
			align-items: center;
		}

		.todo-list-add input {
			flex: 0.4;
			padding: 0.25rem;
			border: 1px solid #ccc;
			border-radius: 4px;
			margin-right: 1rem;
		}

		.todo-list-add button {
			padding: 0.25rem 1rem;
			border: 2px solid #ba54d2;
			border-radius: 4px;
			background-color: #fff;
			cursor: pointer;
			font-weight: bold;
		}
	</style>
</Layout>
